// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /feed/daemon/ping)
	PostFeedDaemonPing(ctx echo.Context) error

	// (POST /feed/daemon/status)
	PostFeedDaemonStatus(ctx echo.Context) error

	// (POST /feed/node/disk)
	PostFeedNodeDisk(ctx echo.Context) error

	// (POST /feed/object/config)
	PostFeedObjectConfig(ctx echo.Context) error

	// (POST /feed/system)
	PostFeedSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFeedDaemonPing converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonPing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonPing(ctx)
	return err
}

// PostFeedDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonStatus(ctx)
	return err
}

// PostFeedNodeDisk converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedNodeDisk(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedNodeDisk(ctx)
	return err
}

// PostFeedObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedObjectConfig(ctx)
	return err
}

// PostFeedSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/feed/daemon/ping", wrapper.PostFeedDaemonPing)
	router.POST(baseURL+"/feed/daemon/status", wrapper.PostFeedDaemonStatus)
	router.POST(baseURL+"/feed/node/disk", wrapper.PostFeedNodeDisk)
	router.POST(baseURL+"/feed/object/config", wrapper.PostFeedObjectConfig)
	router.POST(baseURL+"/feed/system", wrapper.PostFeedSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
